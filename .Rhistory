library(wbCorr)
usethis::use_mit_license()
library(wbCorr)
getwd()
library(wbCorr)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/within-between-correlations.R", echo=TRUE)
getwd()
library(wbCorr)
use_roxygen_md()
library(usethis)
use_roxygen_md()
use_namespace()
use_package(methods)
use_package('methods')
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
devtools::document()
devtools::document()
usethis::document()
devtools::document()
devtools::document()
library(wbCorr)
library('MASS')
df <- crabs
df
head(crabs)
str(crabs)
pred <- partykit::ctree(sex~., data = df, type = 'response')
pred <- partykit::ctree(sex~., data = df)
pred
plot(pred)
tree <- partykit::ctree(sex~., data = df)
plot(tree)
tree <- partykit::ctree(sex~., data = df)
plot(tree)
forest <- partykit::cforest(sex~., data = df, ntree = 1000, mtry = 4, OOB =TRUE)
forest <- partykit::cforest(sex~., data = df, ntree = 1000, mtry = 4)
pred <- predict(forest, OOB = TRUE)
pred <- predict(forest, OOB = TRUE)
conf_T <- table(crabs$sex, pred)
cont_T
conf_T
missed <- conf_T
diag(missed) <- 0
n_missed <- sum(missed)
n_missed
n_missed / sum(conf_T)
sum(missed) / sum(conf_T)
missed <- conf_T
diag(missed) <- 0
sum(missed) / sum(conf_T)
library('MASS')
df <- crabs
head(crabs)
str(crabs)
tree <- partykit::ctree(sex~., data = df)
plot(tree)
forest <- partykit::cforest(sex~., data = df, ntree = 1000, mtry = 4)
pred <- predict(forest, OOB = TRUE)
conf_T <- table(crabs$sex, pred)
conf_T
missed <- conf_T
diag(missed) <- 0
sum(missed) / sum(conf_T)
library(nnet)
network <- nnet(sex~., data = crabs,
size = 3,
decay = 0,
linout = FALSE,
maxit = 500)
network <- nnet(sex~., data = crabs,
size = 3,
decay = 0,
linout = FALSE,
maxit = 10000)
plot(network)
network
head(crabs)
str(crabs)
network
count <- function(a, b) {
n_count <- 0
for (i in b){
if (a == b) {
n_count <- n_count + 1
}
}
return(n_count)
}
count(3, c(1,2,3,3,3))
count <- function(a, b) {
n_count <- 0
for (i in 1:length(b)){
if (a == b[i]) {
n_count <- n_count + 1
}
}
return(n_count)
}
count(3, c(1,2,3,3,3))
count(3, c(1,2,3,3,3,4,4,3))
sum(3==c(1,2,3,3,3))
sum(3==c(1,2,3,3,3,4,4,4))
sum(3==c(1,2,3,3,3,4,4,4,3))
sum(3==c(1,2,3,3,3,4,4,4))
iris
library(wbCorr)
?wbCorr
?wbCorrelations
?wbCorrelation
cors <- wbCorr(iris, iris$Species)
cors <- wbCorrelations(iris, iris$Species)
cors
summary(cors)
cors
get_correlations(cors)
cors
summary(cors)
library(wbCorr)
cors
library(wbCorr)
a <- wbCorr(iris, iris$Species)
a
a@within
?wbCorr
devtools::document()
devtools::document()
library(wbCorr)
library(wbCorr)
a <- wbCorr(iris, iris$Species')
a
a
print(a)
summary(a)
a <- wbCorr(iris, iris$Species')
a <- wbCorr(iris, iris$Species)
a
summary(a)
?wbCorr
library(wbCorr)
a <- wbCorr(iris, iris$Species)
a
summary(a)
get_correlations(a)
get_correlations(a, which = '')
get_correlations(a, which = 'b')
get_correlations(a, which = 'w')
library(wbCorr)
?wbCorr
a <- wbCorr(iris, iris$Species)
a
class(a)
summary(a)
get_correlations(a)
a
library(wbCorr)
a <- wbCorr(iris, iris$Species)
a
print(a)
a
get_correlations(a)
summary(a)
summary(a, 'w')
summary(a, 'b')
?`wbCorr-class`
?wbCorr
library(wbCorr)
?wbCorr
?wbCorr
wbCorr(iris, iris$Species, method = 'spearman')
wbCorr(iris, iris$Species, method = 'kendall')
library(wbCorr)
?wbCorr
library(wbCorr)
?wbCorr
?get_correlations
?match.arg
library(wbCorr)
?wbCorr
?get_correlations
?wbCorr
a <- wbCorr(iris, iris$Species)
a
print(a)
summary(a)
get_correlations(a)
get_correlations(a, 'between')
get_correlations(a, 'b')
get_correlations(a, 'c')
match.arg
?match.arg
library(wbCorr)
library(wbCorr)
?wbCorr
?wbCorr::summary
library(wbCorr)
?sumary
?summary.wbCorr
?wbCorr
library(wbCorr)
?summary.wbCorr
?summary. wbCorr
library(wbCorr)
?summary.wbCorr
?summary.wbCorr
library(wbCorr)
?summary.`wbCorr`
?summary
?summary wbCorr
?wbCorr.summary
?summary
?wbCorr
?wbCorr
library(wbCorr)
?wbCorr
library(wbCorr)
?summary.wbCorr
library(wbCorr)
?wbCorr
?summary.wbCorr
library(wbCorr)
?summary
library(wbCorr)
?summary.wbCorr
library(wbCorr)
?summary.wbCorr
library(wbCorr)
library(wbCorr)
?wbCorr
library(wbCorr)
?wbCorr
library(wbCorr)
?get_correlations
library(wbCorr)
?wbCorr
?get_correlations
library(wbCorr)
?wbCorr
library(wbCorr)
?wbCorr
a <- wbCorr(iris, iris$Species)
a
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
library(wbCorr)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
wbCorrObject
summary(wbCorrObject, which = c('bw'))
get_correlations(wbCorrObject, which = 'b')
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
summary(wbCorrObject, 'm')
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
get_correlations(wbCorrObject, which = 'bw')
get_correlations(wbCorrObject, which = 'b')
summary(wbCorrObject, 'bw')
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
# Custom implementation of mvrnorm using base R
mvrnorm <- function(n, mu, Sigma) {
L <- chol(Sigma)
Z <- matrix(rnorm(n * length(mu)), n)
t(mu + Z %*% L)
}
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
data
wbCorr <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorr
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
library(wbCorr)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorrObject
summary(wbCorrObject, which = c('bw'))
get_correlations(wbCorrObject, which = 'b')
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
wbCorrObject
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
options(warn = 1)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
wbCorrObject
summary(wbCorrObject, which = c('bw'))
get_correlations(wbCorrObject, which = 'b')
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
get_correlations(wbCorrObject, which = 'b')
summary(wbCorrObject, which = c('bw'))
get_correlations(wbCorrObject, which = 'b')
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
wbCorrObject
summary(wbCorrObject, which = c('bw'))
get_correlations(wbCorrObject, which = 'b')
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/within-between-correlations.R", echo=TRUE)
getwd()
library(wbCorr)
a <- wbCorr(iris, iris$Species)
a
print(a)
get_tables(a)
get_table(a)
get_matrix(a)
get_matrices(a)
summary(a)
library(wbCorr)
library(wbCorr)
wbCorr(iris,iris$Species)
wbCorr::wbCorr(iris, iris$Species)
hello
wbCorr::update_wbCorr()
library(wbCorr)
update_wbCorr()
update_wbCorr()
library(wbCorr)
update_wbCorr()
library(wbCorr)
?wbCorr
update_wbCorr()
library(wbCorr)
library(wbCorr)
library(wbCorr)
update_my_package()
library(wbCorr)
check_package_update()
# Example usage
check_package_update("wbCorr", "Pascal-Kueng", "wbCorr")
library(wbCorr)
# Example usage
check_package_update("wbCorr", "Pascal-Kueng", "wbCorr")
library(wbCorr)
# Example usage
check_package_update("wbCorr", "Pascal-Kueng", "wbCorr")
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
packageVersion('wbCorr')
packageVersion('wbCorr')
local_version <- packageVersion('wbCorr')
# Build the URL to the DESCRIPTION file on GitHub
url <- "https://raw.githubusercontent.com/Pascal-Kueng/wbCorr/main/DESCRIPTION"
# Get the DESCRIPTION file content from GitHub
response <- httr::GET(url)
response
require(httr2)
# Get the DESCRIPTION file content from GitHub
response <- httr2::GET(url)
require(httr)
# Get the DESCRIPTION file content from GitHub
response <- httr::GET(url)
# Get the DESCRIPTION file content from GitHub
response <- httr::GET(url)
response
class(response)
as.text(response)
as.character(response)
# Get the remote DESCRIPTION file content as a character string
remote_description <- httr::content(response, as = "text", encoding = "UTF-8")
remote_description
# Read the remote DESCRIPTION file as a dataframe
remote_description_df <- readr::read.dcf(remote_description)
# Get the remote DESCRIPTION file content as a character string
remote_description <- httr::content(response, as = "text", encoding = "UTF-8")
cat("Error: Could not access the remote DESCRIPTION file.")
remote_description
strsplit(remote_description, split = "Version")
# Get the remote DESCRIPTION file content as a character string
remote_description <- httr::content(response, as = "text", encoding = "UTF-8")
strsplit(remote_description, split = "Version: ")
strsplit(remote_description, split = "Version: ")[[2]]
strsplit(remote_description, split = "Version: ")[2]
strsplit(remote_description, split = "Version: ")[[1]]
strsplit(remote_description, split = "Version: ")[[1]][2]
remote_split <- strsplit(remote_description, split = "Version: ")[[1]][2]
strsplit(remote_split, split = "\n")[[1]][1]
remote_split <- strsplit(remote_description, split = "\n")
remote_split
remote_split <- as.data.frame(strsplit(remote_description, split = "\n"))
remote_split
# Get the remote DESCRIPTION file content as a character string
remote_description <- httr::content(response, as = "text", encoding = "UTF-8")
# Get the remote DESCRIPTION file content as a character string
remote_description <- httr::content(response, as = "text", encoding = "UTF-8")
remote_split <- strsplit(remote_description, split = "\n")
remote_split
remote_split[[1]]
remote_split <- strsplit(remote_description, split = "\n")[[1]]
remote_split
class(remote_split)
for (i in 1:length(remote_split)) {
print(remote_split[i])
}
remote_split <- strsplit(remote_description, split = ":")[[1]]
for (i in 1:length(remote_split)) {
print(remote_split[i])
}
remote_split <- strsplit(remote_description, split = "version: ")[[1]]
for (i in 1:length(remote_split)) {
print(remote_split[i])
}
remote_split <- strsplit(remote_description, split = "version: ")[[1]][2]
remote_split
remote_split <- strsplit(remote_description, split = "version: ")[[1]]
remote_split
remote_split <- strsplit(remote_description, split = "Version: ")[[1]]
remote_split
remote_split <- strsplit(remote_description, split = "Version: ")[[1]][2]
remote_split
remote_version <- strsplit(remote_split, split = "\n")[[1]][1]
remote_version
class(local_version)
as.package_version(remote_version)
remote_version <- as.package.version(strsplit(remote_split, split = "\n")[[1]][1])
class(remote_version)
remote_version <- as.package.version(strsplit(remote_split, split = "\n")[[1]][1])
remote_version <- as.package_version(strsplit(remote_split, split = "\n")[[1]][1])
class(remote_version)
# Print the local and remote version numbers
cat("Current package version: ", local_version, "\n", sep = "")
# Print the local and remote version numbers
cat("Current package version: ", as.character(local_version), "\n", sep = "")
cat("New package version on GitHub: ", as.character(remote_version), "\n", sep = "")
cat("Latest package version on GitHub: ", as.character(remote_version), "\n", sep = "")
# Print the local and remote version numbers
cat("Current package version: ", as.character(local_version), "\n", sep = "")
cat("Latest package version on GitHub: ", as.character(remote_version), "\n", sep = "")
# Compare the version numbers and print a message
if (remote_version > local_version) {
cat("There is a newer version available on GitHub.")
} else {
cat("You have the latest version.")
}
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
update_wbCorr()
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
remotes::install_github('Pascal-Kueng/wbCorr')
library(wbCorr)
unload('wbCorr', detach = TRUE)
detach('wbCorr', unload = TRUE)
update_wbCorr()
update_wbCorr()
detach("package:wbCorr", unload = TRUE)
library(wbCorr)
detach("package:wbCorr", unload = TRUE)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
update_wbCorr()
y
package_version('wbCorr')
packageVersion('wbCorr')
update_wbCorr()
packateVersion('wbCorr')
packageVersion('wbCorr')
