# Get the remote DESCRIPTION file content as a character string
remote_description <- httr::content(response, as = "text", encoding = "UTF-8")
# Get the remote DESCRIPTION file content as a character string
remote_description <- httr::content(response, as = "text", encoding = "UTF-8")
remote_split <- strsplit(remote_description, split = "\n")
remote_split
remote_split[[1]]
remote_split <- strsplit(remote_description, split = "\n")[[1]]
remote_split
class(remote_split)
for (i in 1:length(remote_split)) {
print(remote_split[i])
}
remote_split <- strsplit(remote_description, split = ":")[[1]]
for (i in 1:length(remote_split)) {
print(remote_split[i])
}
remote_split <- strsplit(remote_description, split = "version: ")[[1]]
for (i in 1:length(remote_split)) {
print(remote_split[i])
}
remote_split <- strsplit(remote_description, split = "version: ")[[1]][2]
remote_split
remote_split <- strsplit(remote_description, split = "version: ")[[1]]
remote_split
remote_split <- strsplit(remote_description, split = "Version: ")[[1]]
remote_split
remote_split <- strsplit(remote_description, split = "Version: ")[[1]][2]
remote_split
remote_version <- strsplit(remote_split, split = "\n")[[1]][1]
remote_version
class(local_version)
as.package_version(remote_version)
remote_version <- as.package.version(strsplit(remote_split, split = "\n")[[1]][1])
class(remote_version)
remote_version <- as.package.version(strsplit(remote_split, split = "\n")[[1]][1])
remote_version <- as.package_version(strsplit(remote_split, split = "\n")[[1]][1])
class(remote_version)
# Print the local and remote version numbers
cat("Current package version: ", local_version, "\n", sep = "")
# Print the local and remote version numbers
cat("Current package version: ", as.character(local_version), "\n", sep = "")
cat("New package version on GitHub: ", as.character(remote_version), "\n", sep = "")
cat("Latest package version on GitHub: ", as.character(remote_version), "\n", sep = "")
# Print the local and remote version numbers
cat("Current package version: ", as.character(local_version), "\n", sep = "")
cat("Latest package version on GitHub: ", as.character(remote_version), "\n", sep = "")
# Compare the version numbers and print a message
if (remote_version > local_version) {
cat("There is a newer version available on GitHub.")
} else {
cat("You have the latest version.")
}
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/wbCorr/R/Update_check.R", echo=TRUE)
update_wbCorr()
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
remotes::install_github('Pascal-Kueng/wbCorr')
library(wbCorr)
unload('wbCorr', detach = TRUE)
detach('wbCorr', unload = TRUE)
update_wbCorr()
update_wbCorr()
detach("package:wbCorr", unload = TRUE)
library(wbCorr)
detach("package:wbCorr", unload = TRUE)
library(wbCorr)
library(wbCorr)
library(wbCorr)
library(wbCorr)
update_wbCorr()
y
package_version('wbCorr')
packageVersion('wbCorr')
update_wbCorr()
packateVersion('wbCorr')
packageVersion('wbCorr')
library('wbCorr')
library(wbCorr)
packageVersion('wbCorr')
install.packages('roxygen2')
library(wbCorr)
update_wbCorr()
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
get_tables(wbCorrObject)
library(wbCorr)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
wbCorrObject <- wbCorr(data[,1:3],
data$participantID,
method = "pearson")
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorrObject
summary(wbCorrObject)
summary(wbCorrObject)
get_tables(wbCorrObject)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorrObject
summary(wbCorrObject)
wbCenter2 <- function(input_data, cluster) {
# Checks
if (!is.data.frame(input_data)) {
stop("input_data must be a data frame")
} else if (ncol(input_data) < 2) {
stop("input_data must have at least two columns")
}
# Determine Cluster Variable
if (is.character(cluster)) {
if (!cluster %in% colnames(input_data)) {
stop("cluster must be a character (name of column in passed DF) or a numeric vector")
}
cluster_var <- input_data[[cluster]]
input_data[[cluster]] <- NULL
} else {
cluster_var <- cluster
cluster <- "cluster"
}
# Center the data
df_within <- data.frame(cluster = cluster_var)
df_between <- data.frame(cluster = cluster_var)
for (name in colnames(input_data)) {
col <- input_data[[name]]
# Drop all non-numeric columns
if(!is.numeric(col)) {
warning(paste("CAUTION: Non-Numeric Variable", name ,"was set to NA!
For correlations involving factors consider psych::statsBy"))
col <- NA
}
grand_mean <- mean(col, na.rm = TRUE)
col_grand_mean_c <- col - grand_mean
# Centering between clusters
between <- suppressWarnings(ave(col_grand_mean_c, cluster_var, FUN = function(x) mean(x, na.rm = TRUE)))
df_between[[name]] <- between
# Centering within clusters
within <- col_grand_mean_c - between
df_within[[name]] <- within
}
return(list(between = df_between, within = df_within))
}
a <- wbCenter2(iris, iris@Species)
a <- wbCenter2(iris, iris$Species)
a
a
a$between
data
b <- wbCenter2(data, data$participantID)
b
1-NA
NA - 1
b$within == NA
b <- wbCenter2(data, data$participantID)
c(1,2,3) - c(1,2,3)
c(NA, 2,2,2) - c(1,1,1,1)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
b <- wbCenter2(data, data$participantID)
b
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorrObject
summary(wbCorrObject)
get_tables(wbCorrObject)
b <- wbCenter2(data, data$participantID)
b
wbCenter2 <- function(input_data, cluster) {
# Checks
if (!is.data.frame(input_data)) {
stop("input_data must be a data frame")
} else if (ncol(input_data) < 2) {
stop("input_data must have at least two columns")
}
# Determine Cluster Variable
if (is.character(cluster)) {
if (!cluster %in% colnames(input_data)) {
stop("cluster must be a character (name of column in passed DF) or a numeric vector")
}
cluster_var <- input_data[[cluster]]
input_data[[cluster]] <- NULL
} else {
cluster_var <- cluster
cluster <- "cluster"
}
# Center the data
df_within <- data.frame(cluster = cluster_var)
df_between <- data.frame(cluster = cluster_var)
for (name in colnames(input_data)) {
col <- input_data[[name]]
# Drop all non-numeric columns
if(!is.numeric(col)) {
warning(paste("CAUTION: Non-Numeric Variable", name ,"was set to NA!
For correlations involving factors consider psych::statsBy"))
col <- NA
}
grand_mean <- mean(col, na.rm = TRUE)
col_grand_mean_c <- col - grand_mean
# Centering between clusters
between <- suppressWarnings(ave(col_grand_mean_c, cluster_var, FUN = function(x) mean(x, na.rm = TRUE)))
df_between[[name]] <- between
# Centering within clusters
within <- col_grand_mean_c - between
df_within[[name]] <- within
df_between[is.na(df_within[name]), name] <- NA
}
return(list(between = df_between, within = df_within))
}
wbCenter2 <- function(input_data, cluster) {
# Checks
if (!is.data.frame(input_data)) {
stop("input_data must be a data frame")
} else if (ncol(input_data) < 2) {
stop("input_data must have at least two columns")
}
# Determine Cluster Variable
if (is.character(cluster)) {
if (!cluster %in% colnames(input_data)) {
stop("cluster must be a character (name of column in passed DF) or a numeric vector")
}
cluster_var <- input_data[[cluster]]
input_data[[cluster]] <- NULL
} else {
cluster_var <- cluster
cluster <- "cluster"
}
# Center the data
df_within <- data.frame(cluster = cluster_var)
df_between <- data.frame(cluster = cluster_var)
for (name in colnames(input_data)) {
col <- input_data[[name]]
# Drop all non-numeric columns
if(!is.numeric(col)) {
warning(paste("CAUTION: Non-Numeric Variable", name ,"was set to NA!
For correlations involving factors consider psych::statsBy"))
col <- NA
}
grand_mean <- mean(col, na.rm = TRUE)
col_grand_mean_c <- col - grand_mean
# Centering between clusters
between <- suppressWarnings(ave(col_grand_mean_c, cluster_var, FUN = function(x) mean(x, na.rm = TRUE)))
df_between[[name]] <- between
# Centering within clusters
within <- col_grand_mean_c - between
df_within[[name]] <- within
df_between[is.na(df_within[name]), name] <- NA
}
return(list(between = df_between, within = df_within))
}
b <- wbCten
b <- wbCenter2(data, data$participantID)
b
library(wbCorr)
library(wbCorr)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorrObject
summary(wbCorrObject)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
a <- psych::statsBy(data = data, group = participantID)
a <- prettystatsBy::statsBy(data = data, group = participantID)
a$pretty
a <- prettystatsBy::statsBy(data = data, group = participantID)
a <- prettystatsBy::statsBy(data = data, group = data$participantID)
a$pretty
summary(wbCorrObject)
summary(wbCorrObject)$within
get_tables(wbCorrObject)$within
a
a$ci.wg
get_tables(wbCorrObject)$within
get_tables(wbCorrObject)$between
a$ci.bg
library(wbCorr)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
get_tables(wbCorrObject)$between
library(wbCorr)
wbCenterFactors <- function(input_data, cluster, factor_var) {
if (!is.data.frame(input_data)) {
stop("input_data must be a data frame")
} else if (ncol(input_data) < 2) {
stop("input_data must have at least two columns")
}
cluster_var <- input_data[[cluster]]
factor_values <- input_data[[factor_var]]
# Create dummy-coded variables
dummy_vars <- model.matrix(~factor_values - 1)
# Initialize data frames for within and between cluster variables
df_within <- data.frame(cluster = cluster_var)
df_between <- data.frame(cluster = cluster_var)
# Loop through the dummy-coded variables
for (i in 1:ncol(dummy_vars)) {
name <- colnames(dummy_vars)[i]
col <- dummy_vars[, i]
# Centering between clusters
between <- suppressWarnings(ave(col, cluster_var, FUN = function(x) mean(x, na.rm = TRUE)))
df_between[[name]] <- between
# Centering within clusters
within <- col - between
df_within[[name]] <- within
}
return(list(between = df_between, within = df_within))
}
iris
wbCenterFactors(iris, iris$Species, 'Species')
iris2 <- iris2
iris2 <- iris
iris2$size <- round(iris$Sepal.Length)
iris2
iris2$size <- iris2$size - 4
iris2
dd <- wbCenterFactors(iris2, iris2$Species, 'size')
dd <- wbCenterFactors(iris2, 'Species', 'size')
dd
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/wbCorr/R/centering_wb.R", echo=TRUE)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/wbCorr/R/centering_wb.R", echo=TRUE)
iris2
a <- wbCenter(iris3, 'Species')
a <- wbCenter(iris2, 'Species')
a
a <- wbCenterFactors(iris2, 'Species', 'size')
a
a <- wbCenter(iris2, 'Species')
b <- wbCenterFactors(iris2, 'Species', 'size')
a$within
b$within
data
data()
data
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
wbCenter(data, 'participantID')
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
wbCenter(data, 'participantID')
a <- wbCenter(data, 'participantID')
cor(a$between$cluster, a$between$var4)
cor(a$within$cluster, a$within$var4)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/wbCorr/R/centering_wb.R", echo=TRUE)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
a <- wbCenter(data, 'participantID')
a
sum(data$var4)
mean(data$var4)
mean(a$between$var4)
cor(a$between$var4, a$between$cluster)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
participant_df$day <- 1:n_obs
View(participant_df)
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
a <- wbCenter(data, 'participantID')
a
source("C:/Users/kueng/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorrObject
get_tables(wbCorrObject)$between
get_tables(wbCorrObject)
?bmlm::isolate
a <- data(BLch9)
a
head(a)
BLch9
a <- BLch9
a
?BLch9
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data <- data[c('participantID', 'day', 'Var1', 'Var2', 'Var3', 'Var4')]
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
data$participantID <- as.factor(data$participantID)
library(wbCorr)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorrObject
get_tables(wbCorrObject)$between
wbCorrObject
get_tables(wbCorrObject)$between
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data = data.frame()
for (i in 1:n_participants) {
participant_df <- data.frame(
simulate_participant(n_obs,
means = c(mean1[i],
mean2[i],
mean3[i]),
sds = c(sd1[i],
sd2[i],
sd3[i]),
rhos = c(within_rho12[i],
within_rho13[i],
within_rho23[i],
within_rhoday1[i],
within_rhoday2[i],
within_rhoday3[i]),
random_effects = random_effects[i,],
proportion_missing = proportion_missing))
participant_df$participantID <- i
colnames(participant_df) <- c("Var1", "Var2", "Var3", "participantID")
participant_df$day <- 1:n_obs
participant_df$Var4 <- i
data = rbind(participant_df, data)
}
data$participantID <- as.factor(data$participantID)
data <- data[,c('participantID', 'day', 'Var1', 'Var2', 'Var3', 'Var4')]
library(wbCorr)
wbCorrObject <- wbCorr(data,
data$participantID,
method = "pearson")
wbCorrObject
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
a <- wbCorr::wbCorr(data, data$participantID)
a
summary(a)
a <- wbCorr::wbCorr(data, data$participantID)
summary(a)
a
get_matrix(a)
a <- wbCorr::wbCorr(data, data$participantID)
wbCorr::get_matrix(a)
wbCorr::get_table(a)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
# Randomly replace values with NA
if (proportion_missing > 0) {
n_na <- round(n_obs * proportion_missing)
if (n_na > 0) {
na_idx1 <- sample(seq_len(n_obs), n_na/3)
na_idx2 <- sample(seq_len(n_obs), n_na/3)
na_idx3 <- sample(seq_len(n_obs), n_na/3)
data[na_idx1, 1] <- NA
data[na_idx2, 2] <- NA
data[na_idx3, 3] <- NA
}
}
data = data.frame()
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
data
a <- wbCorr::wbCorr(data, data$participantID)
wbCorr::get_table(a)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
source("C:/Users/pascku/OneDrive/scripts/01 R-Packages/within-between-correlations/simdat.R", echo=TRUE)
